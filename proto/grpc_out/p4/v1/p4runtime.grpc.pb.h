// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: p4/v1/p4runtime.proto
// Original file comments:
// Copyright (c) 2016, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_p4_2fv1_2fp4runtime_2eproto__INCLUDED
#define GRPC_p4_2fv1_2fp4runtime_2eproto__INCLUDED

#include "p4/v1/p4runtime.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace p4 {
namespace v1 {

class P4Runtime final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Update one or more P4 entities on the target.
    virtual ::grpc::Status Write(::grpc::ClientContext* context, const ::p4::v1::WriteRequest& request, ::p4::v1::WriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::p4::v1::WriteResponse>> AsyncWrite(::grpc::ClientContext* context, const ::p4::v1::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::p4::v1::WriteResponse>>(AsyncWriteRaw(context, request, cq));
    }
    // Read one or more P4 entities from the target.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::p4::v1::ReadResponse>> Read(::grpc::ClientContext* context, const ::p4::v1::ReadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::p4::v1::ReadResponse>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::p4::v1::ReadResponse>> AsyncRead(::grpc::ClientContext* context, const ::p4::v1::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::p4::v1::ReadResponse>>(AsyncReadRaw(context, request, cq, tag));
    }
    // Sets the P4 forwarding-pipeline config.
    virtual ::grpc::Status SetForwardingPipelineConfig(::grpc::ClientContext* context, const ::p4::v1::SetForwardingPipelineConfigRequest& request, ::p4::v1::SetForwardingPipelineConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::p4::v1::SetForwardingPipelineConfigResponse>> AsyncSetForwardingPipelineConfig(::grpc::ClientContext* context, const ::p4::v1::SetForwardingPipelineConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::p4::v1::SetForwardingPipelineConfigResponse>>(AsyncSetForwardingPipelineConfigRaw(context, request, cq));
    }
    // Gets the current P4 forwarding-pipeline config.
    virtual ::grpc::Status GetForwardingPipelineConfig(::grpc::ClientContext* context, const ::p4::v1::GetForwardingPipelineConfigRequest& request, ::p4::v1::GetForwardingPipelineConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::p4::v1::GetForwardingPipelineConfigResponse>> AsyncGetForwardingPipelineConfig(::grpc::ClientContext* context, const ::p4::v1::GetForwardingPipelineConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::p4::v1::GetForwardingPipelineConfigResponse>>(AsyncGetForwardingPipelineConfigRaw(context, request, cq));
    }
    // Represents the bidirectional stream between the controller and the
    // switch (initiated by the controller), and is managed for the following
    // purposes:
    // - connection initiation through master arbitration
    // - indicating switch session liveness: the session is live when switch
    //   sends a positive master arbitration update to the controller, and is
    //   considered dead when either the stream breaks or the switch sends a
    //   negative update for master arbitration
    // - the controller sending/receiving packets to/from the switch
    // - streaming of notifications from the switch
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>> StreamChannel(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>>(StreamChannelRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>> AsyncStreamChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>>(AsyncStreamChannelRaw(context, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::p4::v1::WriteResponse>* AsyncWriteRaw(::grpc::ClientContext* context, const ::p4::v1::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::p4::v1::ReadResponse>* ReadRaw(::grpc::ClientContext* context, const ::p4::v1::ReadRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::p4::v1::ReadResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::p4::v1::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::p4::v1::SetForwardingPipelineConfigResponse>* AsyncSetForwardingPipelineConfigRaw(::grpc::ClientContext* context, const ::p4::v1::SetForwardingPipelineConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::p4::v1::GetForwardingPipelineConfigResponse>* AsyncGetForwardingPipelineConfigRaw(::grpc::ClientContext* context, const ::p4::v1::GetForwardingPipelineConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>* StreamChannelRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>* AsyncStreamChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Write(::grpc::ClientContext* context, const ::p4::v1::WriteRequest& request, ::p4::v1::WriteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::p4::v1::WriteResponse>> AsyncWrite(::grpc::ClientContext* context, const ::p4::v1::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::p4::v1::WriteResponse>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::p4::v1::ReadResponse>> Read(::grpc::ClientContext* context, const ::p4::v1::ReadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::p4::v1::ReadResponse>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::p4::v1::ReadResponse>> AsyncRead(::grpc::ClientContext* context, const ::p4::v1::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::p4::v1::ReadResponse>>(AsyncReadRaw(context, request, cq, tag));
    }
    ::grpc::Status SetForwardingPipelineConfig(::grpc::ClientContext* context, const ::p4::v1::SetForwardingPipelineConfigRequest& request, ::p4::v1::SetForwardingPipelineConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::p4::v1::SetForwardingPipelineConfigResponse>> AsyncSetForwardingPipelineConfig(::grpc::ClientContext* context, const ::p4::v1::SetForwardingPipelineConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::p4::v1::SetForwardingPipelineConfigResponse>>(AsyncSetForwardingPipelineConfigRaw(context, request, cq));
    }
    ::grpc::Status GetForwardingPipelineConfig(::grpc::ClientContext* context, const ::p4::v1::GetForwardingPipelineConfigRequest& request, ::p4::v1::GetForwardingPipelineConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::p4::v1::GetForwardingPipelineConfigResponse>> AsyncGetForwardingPipelineConfig(::grpc::ClientContext* context, const ::p4::v1::GetForwardingPipelineConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::p4::v1::GetForwardingPipelineConfigResponse>>(AsyncGetForwardingPipelineConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>> StreamChannel(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>>(StreamChannelRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>> AsyncStreamChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>>(AsyncStreamChannelRaw(context, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::p4::v1::WriteResponse>* AsyncWriteRaw(::grpc::ClientContext* context, const ::p4::v1::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::p4::v1::ReadResponse>* ReadRaw(::grpc::ClientContext* context, const ::p4::v1::ReadRequest& request) override;
    ::grpc::ClientAsyncReader< ::p4::v1::ReadResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::p4::v1::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::p4::v1::SetForwardingPipelineConfigResponse>* AsyncSetForwardingPipelineConfigRaw(::grpc::ClientContext* context, const ::p4::v1::SetForwardingPipelineConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::p4::v1::GetForwardingPipelineConfigResponse>* AsyncGetForwardingPipelineConfigRaw(::grpc::ClientContext* context, const ::p4::v1::GetForwardingPipelineConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>* StreamChannelRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::p4::v1::StreamMessageRequest, ::p4::v1::StreamMessageResponse>* AsyncStreamChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_Write_;
    const ::grpc::RpcMethod rpcmethod_Read_;
    const ::grpc::RpcMethod rpcmethod_SetForwardingPipelineConfig_;
    const ::grpc::RpcMethod rpcmethod_GetForwardingPipelineConfig_;
    const ::grpc::RpcMethod rpcmethod_StreamChannel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Update one or more P4 entities on the target.
    virtual ::grpc::Status Write(::grpc::ServerContext* context, const ::p4::v1::WriteRequest* request, ::p4::v1::WriteResponse* response);
    // Read one or more P4 entities from the target.
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::p4::v1::ReadRequest* request, ::grpc::ServerWriter< ::p4::v1::ReadResponse>* writer);
    // Sets the P4 forwarding-pipeline config.
    virtual ::grpc::Status SetForwardingPipelineConfig(::grpc::ServerContext* context, const ::p4::v1::SetForwardingPipelineConfigRequest* request, ::p4::v1::SetForwardingPipelineConfigResponse* response);
    // Gets the current P4 forwarding-pipeline config.
    virtual ::grpc::Status GetForwardingPipelineConfig(::grpc::ServerContext* context, const ::p4::v1::GetForwardingPipelineConfigRequest* request, ::p4::v1::GetForwardingPipelineConfigResponse* response);
    // Represents the bidirectional stream between the controller and the
    // switch (initiated by the controller), and is managed for the following
    // purposes:
    // - connection initiation through master arbitration
    // - indicating switch session liveness: the session is live when switch
    //   sends a positive master arbitration update to the controller, and is
    //   considered dead when either the stream breaks or the switch sends a
    //   negative update for master arbitration
    // - the controller sending/receiving packets to/from the switch
    // - streaming of notifications from the switch
    virtual ::grpc::Status StreamChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::p4::v1::StreamMessageResponse, ::p4::v1::StreamMessageRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::p4::v1::WriteRequest* request, ::p4::v1::WriteResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::p4::v1::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::p4::v1::WriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::p4::v1::ReadRequest* request, ::grpc::ServerWriter< ::p4::v1::ReadResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::p4::v1::ReadRequest* request, ::grpc::ServerAsyncWriter< ::p4::v1::ReadResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetForwardingPipelineConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetForwardingPipelineConfig() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetForwardingPipelineConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetForwardingPipelineConfig(::grpc::ServerContext* context, const ::p4::v1::SetForwardingPipelineConfigRequest* request, ::p4::v1::SetForwardingPipelineConfigResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetForwardingPipelineConfig(::grpc::ServerContext* context, ::p4::v1::SetForwardingPipelineConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::p4::v1::SetForwardingPipelineConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetForwardingPipelineConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetForwardingPipelineConfig() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetForwardingPipelineConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetForwardingPipelineConfig(::grpc::ServerContext* context, const ::p4::v1::GetForwardingPipelineConfigRequest* request, ::p4::v1::GetForwardingPipelineConfigResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetForwardingPipelineConfig(::grpc::ServerContext* context, ::p4::v1::GetForwardingPipelineConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::p4::v1::GetForwardingPipelineConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StreamChannel() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StreamChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::p4::v1::StreamMessageResponse, ::p4::v1::StreamMessageRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamChannel(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::p4::v1::StreamMessageResponse, ::p4::v1::StreamMessageRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Write<WithAsyncMethod_Read<WithAsyncMethod_SetForwardingPipelineConfig<WithAsyncMethod_GetForwardingPipelineConfig<WithAsyncMethod_StreamChannel<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::p4::v1::WriteRequest* request, ::p4::v1::WriteResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::p4::v1::ReadRequest* request, ::grpc::ServerWriter< ::p4::v1::ReadResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetForwardingPipelineConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetForwardingPipelineConfig() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetForwardingPipelineConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetForwardingPipelineConfig(::grpc::ServerContext* context, const ::p4::v1::SetForwardingPipelineConfigRequest* request, ::p4::v1::SetForwardingPipelineConfigResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetForwardingPipelineConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetForwardingPipelineConfig() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetForwardingPipelineConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetForwardingPipelineConfig(::grpc::ServerContext* context, const ::p4::v1::GetForwardingPipelineConfigRequest* request, ::p4::v1::GetForwardingPipelineConfigResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StreamChannel() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StreamChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::p4::v1::StreamMessageResponse, ::p4::v1::StreamMessageRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Write() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::p4::v1::WriteRequest, ::p4::v1::WriteResponse>(std::bind(&WithStreamedUnaryMethod_Write<BaseClass>::StreamedWrite, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, const ::p4::v1::WriteRequest* request, ::p4::v1::WriteResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::p4::v1::WriteRequest,::p4::v1::WriteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetForwardingPipelineConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetForwardingPipelineConfig() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::p4::v1::SetForwardingPipelineConfigRequest, ::p4::v1::SetForwardingPipelineConfigResponse>(std::bind(&WithStreamedUnaryMethod_SetForwardingPipelineConfig<BaseClass>::StreamedSetForwardingPipelineConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetForwardingPipelineConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetForwardingPipelineConfig(::grpc::ServerContext* context, const ::p4::v1::SetForwardingPipelineConfigRequest* request, ::p4::v1::SetForwardingPipelineConfigResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetForwardingPipelineConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::p4::v1::SetForwardingPipelineConfigRequest,::p4::v1::SetForwardingPipelineConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetForwardingPipelineConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetForwardingPipelineConfig() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::p4::v1::GetForwardingPipelineConfigRequest, ::p4::v1::GetForwardingPipelineConfigResponse>(std::bind(&WithStreamedUnaryMethod_GetForwardingPipelineConfig<BaseClass>::StreamedGetForwardingPipelineConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetForwardingPipelineConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetForwardingPipelineConfig(::grpc::ServerContext* context, const ::p4::v1::GetForwardingPipelineConfigRequest* request, ::p4::v1::GetForwardingPipelineConfigResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetForwardingPipelineConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::p4::v1::GetForwardingPipelineConfigRequest,::p4::v1::GetForwardingPipelineConfigResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_SetForwardingPipelineConfig<WithStreamedUnaryMethod_GetForwardingPipelineConfig<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::SplitServerStreamingHandler< ::p4::v1::ReadRequest, ::p4::v1::ReadResponse>(std::bind(&WithSplitStreamingMethod_Read<BaseClass>::StreamedRead, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::p4::v1::ReadRequest* request, ::grpc::ServerWriter< ::p4::v1::ReadResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::p4::v1::ReadRequest,::p4::v1::ReadResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Read<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Write<WithSplitStreamingMethod_Read<WithStreamedUnaryMethod_SetForwardingPipelineConfig<WithStreamedUnaryMethod_GetForwardingPipelineConfig<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace p4


#endif  // GRPC_p4_2fv1_2fp4runtime_2eproto__INCLUDED
